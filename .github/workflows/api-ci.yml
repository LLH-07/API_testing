name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate CSV headers & empty rows
        run: |
          for f in AU-*.csv; do
            echo "üîç Checking $f"
            hdr=$(head -n1 "$f" | tr -d '\r')
            if [[ "$f" == "AU-14-17.csv" ]]; then
              [[ "$hdr" == "email" ]] || { echo "Invalid header in $f: '$hdr' (expected 'email')" && exit 1; }
            else
              echo "$hdr" | grep -q ',' || { echo "Missing commas in header of $f (got: '$hdr')" && exit 1; }
            fi
            awk '/^$/ {print "Empty line in '"$f"'"; exit 1}' "$f"
          done

  postman-tests:
    name: Spin up App & Run Postman Tests
    runs-on: ubuntu-latest
    needs: validate-csv
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1) Buildx enables docker-compose with newer features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 2) Start all services defined in docker-compose.yml
      - name: Build & start Docker Compose
        run: docker compose up -d --build

      # 3) Wait for API to listen on 8091
      - name: Wait for API to be ready
        run: |
          for i in {1..20}; do
            if nc -z localhost 8091; then
              echo "API is up!"
              exit 0
            fi
            echo "Waiting for API (attempt $i)..."
            sleep 3
          done
          echo "API did not start in time. Container logs:"
          docker compose logs api || true
          exit 1

      # 4) Install Postman CLI
      - name: Install Postman CLI
        run: curl -sL https://dl-cli.pstmn.io/install/linux64.sh \| sh

      # 5) Login to Postman
      - name: Postman login
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: postman login --with-api-key "$POSTMAN_API_KEY"

      # 6) Run your Postman Collections
      - name: Run Postman Collections
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          mkdir -p results
          postman collection run Login.postman_collection.json \
            --environment HW07.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export results/login.xml

          postman collection run Register.postman_collection.json \
            --environment HW07.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export results/register.xml

          postman collection run "Forget password.postman_collection.json" \
            --environment HW07.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export results/forgot-password.xml

      # 7) Publish JUnit reports
      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: results/*.xml
