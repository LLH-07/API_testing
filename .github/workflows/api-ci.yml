name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSV & tests
        uses: actions/checkout@v3

      - name: Validate CSV headers & empty rows
        run: |
          for f in *.csv; do
            echo "🔍 Checking $f"
            # Check for empty lines
            if grep -qE '^$' "$f"; then
              echo "❌ Empty line found in $f"
              exit 1
            fi
            # Validate headers
            header=$(head -1 "$f")
            if [[ -z $header ]]; then
              echo "❌ Missing headers in $f"
              exit 1
            fi
          done

  postman-tests:
    name: Spin up App & Run Postman Tests
    needs: validate-csv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo & tests
        uses: actions/checkout@v3

      - name: Checkout practice-software-testing repo
        uses: actions/checkout@v3
        with:
          repository: testsmith-io/practice-software-testing
          path: practice-software-testing
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & start Docker Compose
        working-directory: practice-software-testing
        run: |
          docker compose -f docker-compose.yml up -d --build \
            || docker-compose -f docker-compose.yml up -d --build

      - name: Fix storage permission & ensure logs dir
        working-directory: practice-software-testing
        run: |
          docker compose exec -T laravel-api mkdir -p storage/logs
          docker compose exec -T laravel-api chmod -R 777 storage bootstrap/cache

      - name: Install PHP dependencies
        working-directory: practice-software-testing
        run: |
          set -euxo pipefail
          docker compose run --rm composer clear-cache || true
          for i in 1 2 3; do
            docker compose run --rm composer install \
              --no-dev \
              --optimize-autoloader \
              --ignore-platform-req=ext-ffi \
              --prefer-source && break
            echo "⚠️  Composer install failed (attempt $i), retrying in 5s…"
            sleep 5
          done

      - name: Setup environment
        working-directory: practice-software-testing
        run: |
          cp .env.example .env
          docker compose exec -T laravel-api php artisan key:generate

      - name: Run database migrations
        working-directory: practice-software-testing
        run: |
          docker compose exec -T laravel-api php artisan migrate --seed

      - name: Wait for API readiness
        working-directory: practice-software-testing
        run: |
          echo "Waiting for API to become ready..."
          for i in {1..10}; do
            if curl -sSf http://localhost:8091 >/dev/null; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet (attempt $i/10)..."
            sleep 10
          done

      - name: Run Postman tests
        run: |
          mkdir -p results
          docker run --network host -v "$(pwd):/etc/newman" postman/newman:alpine \
            run "register.postman_collection.json" \
            --data "register.csv" \
            --reporters cli,junit \
            --reporter-junit-export "/etc/newman/results/register.xml" \
            --global-var "API_BASE_URL=http://localhost:8091/api"

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: postman-test-results
          path: results/*.xml

      - name: Capture logs on failure
        if: ${{ failure() }}
        working-directory: practice-software-testing
        run: |
          docker compose logs --no-color > docker-logs.txt
          echo "::group::Application Logs"
          cat docker-logs.txt
          echo "::endgroup::"
          echo "::warning::Application logs saved as artifact"
        continue-on-error: true
