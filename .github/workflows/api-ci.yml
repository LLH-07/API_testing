name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSV & tests
        uses: actions/checkout@v3

      - name: Validate CSV headers & empty rows
        run: |
          for f in AU-*.csv; do
            echo "üîç Checking $f"
            hdr=$(head -n1 "$f" | tr -d '\r')
            if [[ "$f" == "AU-14-17.csv" ]]; then
              [[ "$hdr" == "email" ]] || { echo "‚ùå Invalid header in $f: '$hdr' (expected 'email')" && exit 1; }
            else
              echo "$hdr" | grep -q ',' || { echo "‚ùå Missing commas in header of $f (got: '$hdr')" && exit 1; }
            fi
            awk '/^$/ {print "‚ùå Empty line in '"$f"'"; exit 1}' "$f"
          done

  postman-tests:
    name: Spin up App & Run Postman Tests
    needs: validate-csv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSV & tests
        uses: actions/checkout@v3

      - name: Checkout TestSmith app
        uses: actions/checkout@v3
        with:
          repository: testsmith-io/practice-software-testing
          path: practice-software-testing
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & start Docker Compose
        working-directory: practice-software-testing
        run: |
          docker compose -f docker-compose.yml up -d --build \
            || docker-compose -f docker-compose.yml up -d --build

      - name: Wait for API on 8000
        run: |
          for i in {1..20}; do
            nc -z localhost 8000 && { echo "‚úÖ API is up!"; exit 0; }
            echo "‚è≥ Waiting for API (attempt $i)‚Ä¶"
            sleep 3
          done
          echo "‚ùå API failed to start. Logs:"
          docker-compose -f practice-software-testing/docker-compose.yml logs laravel-api --tail=50
          exit 1

      - name: Install Postman CLI
        run: curl -sL https://dl-cli.pstmn.io/install/linux64.sh | sh

      - name: Postman login
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run Postman Collections
        run: |
          mkdir -p results

          postman collection run Login.postman_collection.json \
            --environment HW07.postman_environment.json \
            --global-var "BASE_URL=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/login.xml

          postman collection run Register.postman_collection.json \
            --environment HW07.postman_environment.json \
            --global-var "BASE_URL=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/register.xml

          postman collection run "Forget password.postman_collection.json" \
            --environment HW07.postman_environment.json \
            --global-var "BASE_URL=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/forgot-password.xml

      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: results/*.xml
