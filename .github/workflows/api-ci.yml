name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSV & tests
        uses: actions/checkout@v3

      - name: Validate CSV files
        run: |
          for f in *.csv; do
            echo "🔍 Validating $f"
            # Check file exists
            [ ! -f "$f" ] && echo "❌ File $f not found" && exit 1
            
            # Check header exists
            header=$(head -n1 "$f")
            [ -z "$header" ] && echo "❌ Missing header in $f" && exit 1
            
            # Check for empty lines
            if grep -qE '^$' "$f"; then
              echo "❌ Empty line found in $f"
              exit 1
            fi
            echo "✅ $f passed validation"
          done

  postman-tests:
    name: Run API Tests
    needs: validate-csv
    runs-on: ubuntu-latest
    env:
      API_PORT: 8091
      COMPOSE_PROJECT_NAME: api-tests
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v3

      - name: Checkout test application
        uses: actions/checkout@v3
        with:
          repository: testsmith-io/practice-software-testing
          path: test-app
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Laravel environment
        working-directory: test-app
        run: |
          # Create minimal environment configuration
          echo "APP_ENV=testing" > .env
          echo "APP_DEBUG=true" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          
          # Generate secure app key
          echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env
          
          # Set default port
          echo "APP_PORT=${{ env.API_PORT }}" >> .env

      - name: Start Docker services
        working-directory: test-app
        run: |
          # Use inline environment variables for Docker Compose
          docker compose build
          docker compose up -d --wait
          
          # Create required directories
          docker compose exec -T laravel-api mkdir -p storage/framework/{sessions,views,cache} storage/logs bootstrap/cache
          
          # Set permissions
          docker compose exec -T laravel-api chmod -R 777 storage bootstrap/cache

      - name: Install dependencies
        working-directory: test-app
        run: docker compose exec -T laravel-api composer install --no-dev --optimize-autoloader

      - name: Run database setup
        working-directory: test-app
        run: |
          docker compose exec -T laravel-api php artisan migrate:fresh --seed
          docker compose exec -T laravel-api php artisan optimize:clear

      - name: Verify API health
        run: |
          echo "Waiting for API to start..."
          for i in {1..10}; do
            if curl -sSf "http://localhost:${{ env.API_PORT }}/api" >/dev/null; then
              echo "✅ API is ready"
              exit 0
            fi
            echo "⏳ Attempt $i/10 - API not ready yet..."
            sleep 5
          done
          echo "❌ API failed to start"
          docker compose -f test-app/docker-compose.yml logs --no-color
          exit 1

      - name: Install Newman
        run: npm install -g newman

      - name: Run API tests
        run: |
          mkdir -p test-results
          
          # Run tests with Newman
          newman run Register.postman_collection.json \
            --environment HW07.postman_environment.json \
            --iteration-data register-data.csv \
            --global-var "base_url=http://localhost:${{ env.API_PORT }}/api" \
            --reporters cli,junit \
            --reporter-junit-export test-results/register.xml \
            --suppress-exit-code
          
          newman run Login.postman_collection.json \
            --environment HW07.postman_environment.json \
            --iteration-data login-data.csv \
            --global-var "base_url=http://localhost:${{ env.API_PORT }}/api" \
            --reporters cli,junit \
            --reporter-junit-export test-results/login.xml \
            --suppress-exit-code
          
          newman run "Forget password.postman_collection.json" \
            --environment HW07.postman_environment.json \
            --iteration-data forgot-password-data.csv \
            --global-var "base_url=http://localhost:${{ env.API_PORT }}/api" \
            --reporters cli,junit \
            --reporter-junit-export test-results/forgot-password.xml \
            --suppress-exit-code

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: test-results/*.xml

      - name: Save Docker logs
        if: ${{ always() }}
        working-directory: test-app
        run: |
          docker compose logs --no-color --tail=100 > docker-logs.txt
          echo "::group::Docker Compose Logs"
          cat docker-logs.txt
          echo "::endgroup::"
        continue-on-error: true
