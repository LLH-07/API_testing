name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CSV & tests
        uses: actions/checkout@v3

      - name: Validate CSV files
        run: |
          for f in *.csv; do
            echo "🔍 Validating $f"
            # Check file exists
            [ ! -f "$f" ] && echo "❌ File $f not found" && exit 1
            
            # Check header exists
            header=$(head -n1 "$f")
            [ -z "$header" ] && echo "❌ Missing header in $f" && exit 1
            
            # Check for empty lines
            if grep -qE '^$' "$f"; then
              echo "❌ Empty line found in $f"
              exit 1
            fi
            echo "✅ $f passed validation"
          done

  postman-tests:
    name: Run API Tests
    needs: validate-csv
    runs-on: ubuntu-latest
    env:
      API_PORT: 8000
      COMPOSE_PROJECT_NAME: api-tests
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v3

      - name: Checkout test application
        uses: actions/checkout@v3
        with:
          repository: testsmith-io/practice-software-testing
          path: test-app
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker environment
        working-directory: test-app
        run: |
          # Create .env if missing
          if [ ! -f .env ]; then
            if [ -f .env.example ]; then
              cp .env.example .env
            else
              echo "APP_ENV=testing" > .env
              echo "APP_KEY=" >> .env
              echo "DB_CONNECTION=sqlite" >> .env
              echo "DB_DATABASE=:memory:" >> .env
            fi
          fi
          
          # Generate app key if needed
          if ! grep -q 'APP_KEY=base64' .env; then
            echo "Generating application key..."
            echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env
          fi

      - name: Start Docker services
        working-directory: test-app
        run: |
          docker compose up -d --build --wait
          docker compose exec -T laravel-api mkdir -p storage/logs
          docker compose exec -T laravel-api chmod -R 777 storage bootstrap/cache

      - name: Install PHP dependencies
        working-directory: test-app
        run: |
          docker compose run --rm composer install \
            --no-dev \
            --optimize-autoloader \
            --ignore-platform-req=ext-ffi \
            --no-interaction

      - name: Run database migrations
        working-directory: test-app
        run: docker compose exec -T laravel-api php artisan migrate:fresh --seed

      - name: Verify API health
        run: |
          echo "Waiting for API to start..."
          for i in {1..15}; do
            if curl -sSf "http://localhost:${{ env.API_PORT }}/api" >/dev/null; then
              echo "✅ API is ready"
              exit 0
            fi
            echo "⏳ Attempt $i/15 - API not ready yet..."
            sleep 5
          done
          echo "❌ API failed to start"
          docker compose -f test-app/docker-compose.yml logs
          exit 1

      - name: Install Newman
        run: npm install -g newman

      - name: Run API tests
        run: |
          mkdir -p test-results
          
          # Helper function to run tests
          run_test() {
            collection=$1
            data=$2
            result_file=$3
            
            newman run "$collection" \
              --environment "HW07.postman_environment.json" \
              --iteration-data "$data" \
              --global-var "base_url=http://localhost:${{ env.API_PORT }}/api" \
              --reporters cli,junit \
              --reporter-junit-export "test-results/$result_file.xml"
          }
          
          run_test "Register.postman_collection.json" "register-data.csv" "register"
          run_test "Login.postman_collection.json" "login-data.csv" "login"
          run_test "Forget password.postman_collection.json" "forgot-password-data.csv" "forgot-password"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: test-results/*.xml

      - name: Save Docker logs on failure
        if: ${{ failure() }}
        working-directory: test-app
        run: |
          docker compose logs --no-color --tail=100 > docker-logs.txt
          echo "::group::Docker Logs"
          cat docker-logs.txt
          echo "::endgroup::"
        continue-on-error: true
