name: API & CSV Validation CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-csv:
    name: Validate CSV files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate CSV headers & empty rows
        run: |
          for f in *.csv; do
            echo "🔍 Checking $f"
            if grep -qE '^$' "$f"; then
              echo "❌ Empty line found in $f"
              exit 1
            fi
            hdr=$(head -1 "$f")
            [[ -n "$hdr" ]] || { echo "❌ Missing header in $f"; exit 1; }
          done

  postman-tests:
    name: Spin up App & Run Postman Tests (data-driven)
    needs: validate-csv
    runs-on: ubuntu-latest
    # 1) Sinh APP_KEY và export vào env của GH Actions
    steps:
      - uses: actions/checkout@v3

      - name: Generate and export Laravel env vars
        run: |
          echo "APP_KEY=base64:$(openssl rand -base64 32)" >> $GITHUB_ENV
          echo "APP_ENV=local"           >> $GITHUB_ENV
          echo "APP_DEBUG=true"          >> $GITHUB_ENV
          echo "DB_CONNECTION=mysql"     >> $GITHUB_ENV
          echo "DB_HOST=mysql"           >> $GITHUB_ENV
          echo "DB_PORT=3306"            >> $GITHUB_ENV
          echo "DB_DATABASE=laravel"     >> $GITHUB_ENV
          echo "DB_USERNAME=root"        >> $GITHUB_ENV
          echo "DB_PASSWORD=root"        >> $GITHUB_ENV

      - name: Checkout practice-software-testing repo
        uses: actions/checkout@v3
        with:
          repository: testsmith-io/practice-software-testing
          path: practice-software-testing
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure storage/logs dir exists & fix permissions on host
        run: |
          mkdir -p practice-software-testing/storage/logs
          chmod -R 777 practice-software-testing/storage

      - name: Build & start Docker Compose
        working-directory: practice-software-testing
        run: docker compose up -d --build

      - name: Wait for API to be ready
        run: |
          for i in {1..15}; do
            if curl -sSf http://localhost:8000 >/dev/null; then
              echo "✅ API is ready!"
              exit 0
            fi
            echo "⏳ Waiting for API... ($i/15)"
            sleep 5
          done
          echo "❌ API failed to start"
          docker compose logs laravel-api --tail=50
          exit 1

      - name: Install PHP dependencies
        working-directory: practice-software-testing
        run: |
          set -euxo pipefail
          docker compose run --rm composer clear-cache || true
          for i in 1 2 3; do
            docker compose run --rm composer install \
              --no-dev --optimize-autoloader --ignore-platform-req=ext-ffi \
              --prefer-source && break
            sleep 5
          done

      - name: Migrate & seed database
        working-directory: practice-software-testing
        run: docker compose exec -T laravel-api php artisan migrate:fresh --seed

      - name: Install Postman CLI
        run: curl -sL https://dl-cli.pstmn.io/install/linux64.sh | sh

      - name: Postman login
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
        run: postman login --with-api-key "$POSTMAN_API_KEY"

      - name: Run Register Collection
        run: |
          mkdir -p results
          postman collection run Register.postman_collection.json \
            --environment HW07.postman_environment.json \
            --iteration-data register-data.csv \
            --global-var "base_url=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/register.xml

      - name: Run Login Collection
        run: |
          postman collection run Login.postman_collection.json \
            --environment HW07.postman_environment.json \
            --iteration-data login-data.csv \
            --global-var "base_url=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/login.xml

      - name: Run Forgot Password Collection
        run: |
          postman collection run "Forget password.postman_collection.json" \
            --environment HW07.postman_environment.json \
            --iteration-data forgot-password-data.csv \
            --global-var "base_url=http://localhost:8000/api" \
            --reporters cli,junit \
            --reporter-junit-export results/forgot-password.xml

      - name: Upload JUnit reports
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: results/*.xml

      - name: Capture Docker logs on failure
        if: failure()
        working-directory: practice-software-testing
        run: |
          docker compose logs --no-color > docker-logs.txt
          echo "::group::Docker Compose Logs"
          cat docker-logs.txt
          echo "::endgroup::"
        continue-on-error: true
